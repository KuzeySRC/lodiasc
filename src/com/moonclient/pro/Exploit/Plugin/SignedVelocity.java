package com.moonclient.pro.Exploit.Plugin;

import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteStreams;
import com.mojang.authlib.GameProfile;
import io.netty.buffer.Unpooled;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.client.Minecraft;
import net.minecraft.client.multiplayer.PlayerInfo;

@Environment(value=EnvType.CLIENT)
public class SignedVelocity {
    private static final List<ResourceLocation> CHANNELS = new ArrayList<ResourceLocation>();
    private static final ResourceLocation CHANNEL_ID = new ResourceLocation("signedvelocity", "main");

    private static void sendCommand(GameProfile profile, String resultType, String args) {
        System.out.println("Sent " + resultType + " to " + profile.getName() + ": " + args);
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF(profile.getId().toString());
        out.writeUTF(resultType);
        out.writeUTF("MODIFY");
        out.writeUTF(args);
        FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.wrappedBuffer(out.toByteArray()));
        ClientPlayNetworking.send(CHANNEL_ID, buf);
    }

    private static GameProfile getPlayerProfile(String name) {
        for (PlayerInfo playerEntry : Minecraft.getInstance().player.connection.getOnlinePlayers()) {
            if (!playerEntry.getProfile().getName().equalsIgnoreCase(name)) continue;
            return playerEntry.getProfile();
        }
        return null;
    }

    public static void ShowBrands() {
        Minecraft.getInstance().player.sendSystemMessage(Component.literal("ยง"));
    }

    public static String getBrands() {
        StringBuilder builder = new StringBuilder();
        builder.append("Public Exploit Collection Brands:\n");
        for (ResourceLocation channel : CHANNELS) {
            builder.append("- ").append(channel.toString()).append("\n");
        }
        return builder.toString();
    }

    public void registerBrands(List<ResourceLocation> identifiers) {
        CHANNELS.clear();
        CHANNELS.addAll(identifiers);
    }

    public static void sendCommandToAll(String args) {
        Minecraft.getInstance().player.connection.getOnlinePlayers().forEach(playerListEntry -> {
            GameProfile profile = playerListEntry.getProfile();
            SignedVelocity.sendCommand(profile, "COMMAND_RESULT", args);
        });
    }

    public static void sendMessageToAll(String args) {
        Minecraft.getInstance().player.connection.getOnlinePlayers().forEach(playerListEntry -> {
            GameProfile profile = playerListEntry.getProfile();
            SignedVelocity.sendCommand(profile, "CHAT_RESULT", args);
        });
    }

    public static void sendCommandToPlayer(String name, String args) {
        GameProfile profile = SignedVelocity.getPlayerProfile(name);
        if (profile != null) {
            String cmd = String.join((CharSequence)" ", args);
            SignedVelocity.sendCommand(profile, "COMMAND_RESULT", cmd);
        }
    }

    public static void sendMessageToPlayer(String name, String args) {
        GameProfile profile = SignedVelocity.getPlayerProfile(name);
        if (profile != null) {
            String msg = String.join((CharSequence)" ", args);
            SignedVelocity.sendCommand(profile, "CHAT_RESULT", msg);
        }
    }

    public static void sendCommandToOfflinePlayer(String name, String[] args) {
        UUID uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + name).getBytes());
        GameProfile profile = new GameProfile(uuid, name);
        String cmd = String.join((CharSequence)" ", args);
        SignedVelocity.sendCommand(profile, "COMMAND_RESULT", cmd);
    }
}
 